
#
# ~/.tmux.conf
#

# Description
# ===========
#
# This is my Tmux config file.  It is part of my dotfiles, which
# establish a custom desktop session based on `bspwm`.  See
# https://gitlab.com/protesilaos/dotfiles.  The syntax theme is part of
# my Tempus Themes project, see https://protesilaos.com/tempus-themes,
# which are also incorporated in my custom setup (dotfiles).
#
# To install `tmux` on Debian Buster:
#
#   sudo apt install tmux
#
# For the meaning of the options in this file, see `man tmux` and/or
# whatever inline documentation is available.
#
# Current `tmux` version is 2.8.
#
# Last full review: 2019-04-01

# Base colours --- DO NOT EDIT
# ============================

# Do not edit these variables manually because they are modified by my
# `own_script_update_environment` script, which is part of my dotfiles,
# inside the "bin" directory.
#
# The reason why you should not assign these to an arbitrary value is
# because of the way I have designed the Tempus themes.  Dark themes use
# colour codes 7 and 15 as foreground values.  The latter is the main
# fg, while the former is its alternative (e.g. used for comment
# blocks).  Simalrly colour codes 0 and 8 are the main background
# values, with the former functioning as the main bg and the latter as
# its alternative.
#
# The inverse it true for light themes.
#
# For the rationale of this design, see the description under the
# heading "0.20.0.20181031" inside the CHANGELOG.md of the Tempus Themes
# Generator: https://gitlab.com/protesilaos/tempus-themes-generator
tempus_fg="#aeadaf"
tempus_bg="#232323"
tempus_fg_alt="#949d9f"
tempus_bg_alt="#312e30"
tempus_bg_dim="#2a2829"

# NOTE on colour naming conventions.  Any other colour I define herein
# follows the numbering of the 16 first escape sequences.  In short
# these are as follows (counting from 0-15 with "br[colour name]"
# standing for the "bright" variant):
#
# black, red, green, yellow, blue, magenta, cyan, white
# brblack, brred, bryellow, brblue, brmagenta, brcyan, brwhite

# Base configuration
# ------------------

# Default shell.  Note that `bash` is the only shell I use.  As such,
# everything in my dotfiles is built arround that constant.
# set -g default-shell /bin/bash

# Basic behaviour for interacting with `tmux` from/with the rest of the
# system.
set -g mouse on
set -s set-clipboard off # needed at least for gnome-terminal

# Need the following for expected behaviour and styling.  The default
# ensures compatibility with most (all?) CLI tools by being compliant
# with Xterm codes.
set -g default-terminal "tmux-256color"
set -ga terminal-overrides "xterm-256color:Tc"

# Key modes: the first is for the status line, the second for all other
# modes.  With these settings, it is possible to use Emacs navigation
# where no Vi normal mode motions are possible, but keep Vi-like
# behaviour for everything else.
set -g status-keys emacs
set -g mode-keys vi

# Scrollback history.
set -g history-limit 10000

# Seaching
set -g wrap-search on

# No lag after ESC.
set -sg escape-time 0

# Time in miliseconds between multiple commands to be considered as part
# of the same chain and, thus, not require another invocation of the
# <prefix>.  See the keybindings section below for all actions defined
# with the `-r` flag.
set -g repeat-time 300

# Key bindings
# ------------

# NOTE the `bind -r` directive uses the `repeat-time` option to bypass
# the need for repeated use of the <prefix> in commands that are
# executed in quick succession.

# NOTE the `bind -n` directive means that the <prefix> is not used.

# reload tmux configs
# unbind r
# bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Alt-Shift-{h,l} to switch windows directly, or <prefix>H,L.  Move
# windows with Alt-Shift-Arrow{left,right}.
bind -n M-H previous-window
bind -n M-L next-window
bind -r H previous-window
bind -r L next-window
bind -nr M-S-Left swap-window -t -1
bind -nr M-S-Right swap-window -t +1

# Kill current pane (-a is for kill all except current)
bind -r x kill-pane
bind C-x kill-pane -a

# Create splits in PWD with Vim equivalent keys
bind -r v split-window -h -p 50 -c '#{pane_current_path}' # horizontally split active pane
bind -r s split-window -v -p 50 -c '#{pane_current_path}' # vertically split active pane
bind -r V split-window -fh -c '#{pane_current_path}' # horizontal for whole screen
bind -r S split-window -fv -c '#{pane_current_path}' # vertical for whole screen

# Navigate panes with prefix key + Vim motions
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# Use Alt-{h,j,k,l} without prefix key to switch panes directly.
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Resize panes with <prefix>Ctrl-{h,j,k,l}.  Omit/adjust the number for
# finer adjustments.
bind -r C-h resize-pane -L 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5
bind -r C-l resize-pane -R 5

# Toggle input sync across panes (displays status when invoked).  The
# use of <prefix>a is a mnemonic for "all".
bind a set-window-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# Toggle status line visibility
bind C-s set-option status

# Toggle pane maximisation (zoom)
bind -r C-m resize-pane -Z # also use default <prefix> z

# Swap active pane with the last one
bind Tab swap-pane -t !

# Swap active pane with the marked one
bind C-Tab swap-pane

# Evenly spread out active and adjacent panes
bind E select-layout -E

# Break free from the current window
bind b break-pane
bind B break-pane -d # do not switch focus to the new window

# Join pane (the oppisite of break-pane)
bind J join-pane -b -s !

# modes
# -----

##### NOTE enable this in case pasting from the clipboard does not work.
### # standard mode
### bind -n C-S-v paste-buffer

# Enter copy-mode directly with Ctrl + Space.  Easier than prefix + [
bind -n C-Space copy-mode

# copy mode
# Vim copy-paste behaviour using the clipboard
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe "xclip -selection clipboard -i"
bind -T copy-mode-vi r send-keys -X rectangle-toggle

# For vi copy mode bindings
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -selection clipboard -i"
# For emacs copy mode bindings
bind -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe "xclip -selection clipboard -i"

# User Interface
# --------------

# Title and window settings
# NOTE auto rename is disabled for the given window upon manual rename.
set -g set-titles on # string shown on titlebars or programs such as `xwininfo`
set -g set-titles-string "#T" # title format
set -g automatic-rename on # name windows with <prefix>, (sessions with <prefix>$)
set -g aggressive-resize off # manpage says "on" is bad for shellsâ€¦
set -g alternate-screen on

# Start indices from 1 for both windows and panes.  Makes it easier for
# direct navigation.  Also renumber windows.
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

# Feedback (numbers represent miliseconds)
set -g display-panes-time 1200 # indicators for `display-panes` command
set -g display-time 1200 # use 0 to keep status line messages until key press

# Alerts
set -g monitor-bell on # check for terminal bell
set -g monitor-activity on # check for activity
set -g monitor-silence 0 # do not check for inactivity
set -g bell-action any # monitor all windows
set -g activity-action other # monitor activity in other windows NOTE DO NOT TRACK CURRENT
set -g silence-action none # this should have no effect when: monitor-silence off
set -g visual-activity on # show message, make no sound
set -g visual-bell on # show message, make no sound

# Default window colours are inherited from the underlying terminal.
# This also allows for a transparent background.
set -g window-style "bg=default,fg=default"
set -g window-active-style "bg=default,fg=default"

# Pane styles.  Setting the bg to "default" allows for transparency, if
# the underlying terminal emulator is configured accordingly.
set -g pane-border-style "bg=$tempus_bg_dim,fg=$tempus_bg_alt"
set -g pane-active-border-style "bg=$tempus_bg_alt,fg=$tempus_fg_alt"

# Copy mode styles.  This governs such things as the visual selection
# block and the search results in the scroll buffer.  I choose to avoid
# setting to plain "reverse" because it is visually identical to Vim's
# selection, which can be confusing sometimes.
set -g mode-style "bg=$tempus_bg_alt,fg=colour6,bold,underscore"

# Status line styles.  Used when displaying status messages and when
# using the command prompt.
set -g message-style "bg=default,fg=default,bold"

# Clock mode options (I seldom use this, but okay).
set -g clock-mode-style 24 # time format
set -g clock-mode-colour "$tempus_fg_alt"

# Status bar
# ----------

# Interval to update status bar in seconds.  Only affects some elements.
# Test on a case-by-case basis.  My setup is not affected.
set -g status-interval 120

# Status bar general options about placement and overall style.
set -g status on
set -g status-style "fg=$tempus_fg,bg=$tempus_bg_dim"
set -g status-position top
set -g status-justify left # this concerns the window list

# NOTE the status bar has three components: left, right, centre.  The
# latter is hard-coded to the window list component.  So instead of
# status-centre, we have to modify the `window-status` (see below).
set -g status-left-length "100"
set -g status-right-length "100"

# Window status.  Always placed in the centre if `status-justify
# "centre"`.  Otherwise it floats next to either of the two remaining
# components of the status bar.
#
# NOTE trigger alert to test bell: echo -e '\a'
set -g window-status-separator ""
set -g window-status-format " #I: #W #{?window_flags,#F , }"
set -g window-status-current-format "#[bold][#I: #W #F]"
set -g window-status-activity-style ""
set -g window-status-bell-style "fg=colour1,bg=default"
set -g window-status-style "fg=$tempus_fg_alt,bg=$tempus_bg_alt"
set -g window-status-current-style "fg=$tempus_fg,bg=$tempus_bg"
set -g window-status-last-style ""

# Status left and right
set -g status-left "#[bold]#{?pane_synchronized,#[fg=colour5] sync on ,}#{?pane_in_mode,#[fg=colour4] #{pane_mode}#{?selection_present, selecting,}#{?rectangle_toggle, rectangle,} ,}"
set -g status-right "#[bg=default,fg=default]#{?client_prefix,#[fg=colour2]#[bg=default]#[reverse],} #S #{session_id} #{?client_prefix,,}"
